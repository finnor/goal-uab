import nextflow.util.SysHelper

docker {
  enabled = true
  sudo = false
  runOptions = "-u \$(id -u):\$(id -g) -v $baseDir:$baseDir -v $baseDir/snpEff/GRCh37.75:/usr/local/bin/snpEff/data/GRCh37.75"
}

params {
  // Adjust these as appropriate to limit CPUs/Memory each process can use
  max_cpus = SysHelper.getAvailCpus()
  max_memory = SysHelper.getAvailMemory()

  input = "$baseDir/PIPELINE_INPUT"
  output = "$baseDir/PIPELINE_OUTPUT"
  genome = "$baseDir/resources/GOAL_GRCh37"
  capture = "$baseDir/panels/GOAL_GRCh37/goal_core497.hg19.bed"
  itdbed = "$baseDir/panels/GOAL_GRCh37/itd_genes.bed"
  reffa = "$params.genome/genome.fa"
  dbsnp = "$params.genome/dbSnp.vcf.gz"
  startFromBcl = true
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
      try {
        if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
          return params.max_memory as nextflow.util.MemoryUnit
        else
          return obj
      }
      catch (all) {
        println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
        return obj
      }
  }
  else if (type == 'cpus') {
    try {
      return Math.min(obj, params.max_cpus as int)
    }
    catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

process {
  // Change the executor as appropriate to SLURM, SGE, LSF, AWS Batch, Azure Batch, etc.
  executor = 'local'

  cpus = { check_max( 2 * task.attempt, 'cpus' ) }
  memory = { check_max( 6.GB * task.attempt, 'memory' ) }

  errorStrategy = { task.exitStatus in [143, 137, 104, 134, 139] ? 'retry' : 'finish' }
  maxRetries = 1

  withLabel: python {
    container = 'python:3.10'
  }

  withLabel: bcl_convert {
    container = 'aflanry/bcl-convert:3.10.5'
  }

  withLabel: trim {
    container = 'goalconsortium/trim_galore:1.1.3'
  }

  withLabel: abra2 {
    container = 'goalconsortium/abra2:1.0.9'
  }

  withLabel: profiling_qc {
    container = 'goalconsortium/profiling_qc:1.1.3'
  }

  withLabel: dnaalign {
    container = 'goalconsortium/dna_alignment:1.0.9'
  }

  withLabel: variantcalling  {
    container = 'goalconsortium/variantcalling:1.1.5'
  }

  withLabel: structuralvariant {
    container = 'goalconsortium/structuralvariant:1.1.4'
  }

  withLabel: pindel {
    container = 'goalconsortium/structuralvariant:1.1.4'
  }
}